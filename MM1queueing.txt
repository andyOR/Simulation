' This is a VBA program for the simulation of an single server queueing system discussed in class by Prof. Barton
Public Sub MM1_1Main()
           
    seed = Worksheets("MM1").Range("MM1.Seed1").Value
    
    mean_interarrival = Worksheets("MM1").Range("MM1.MeanInterArrival1").Value
    mean_service = Worksheets("MM1").Range("MM1.MeanServiceTime1").Value
    num_delays_required = Worksheets("MM1").Range("MM1.NumOfCustomers").Value
    
    num_events = 2
    
    'Initialize the random seeds
    Call InitializeRNSeed
    
    'Initialize the simulation.
    Call initialize
 
    'Run the simulation while more delays are still needed.
    Do Until num_custs_delayed >= num_delays_required
        
        'Determine the next event
        Call timing
        
        'Update time-average statistical accumulators.
        Call update_time_avg_stats
        
        'Invoke the appropriate event function.
        Select Case next_event_type
        Case 1
            Call arrive
        Case 2
            Call depart
        End Select
    Loop
    
    'Invoke the report generator and end the simulation.
    Call report

End Sub

Private Static Sub initialize()
    
    'Allocate spaces for the arrays.
    ReDim time_arrival(1 To Q_LIMIT) As Double
    ReDim time_next_event(1 To 2) As Double
    
    'Initialize the simulation clock
    sim_time = 0#
    
    'Initialize the state variables.
    server_status = IDLE
    num_in_q = 0
    time_last_event = 0#
    
    'Initialize the statistical counters.
    num_custs_delayed = 0
    total_of_delays = 0#
    area_num_in_q = 0#
    area_server_status = 0#
    
    'Initialize event list. Since no customers are present, the departure
    '  (service completion) event is eliminated from consideration.
    time_next_event(1) = sim_time + Expon(mean_interarrival, seed)
    time_next_event(2) = 1E+30

End Sub

Private Sub timing() ' Timing function
    
    Dim i As Integer
    Dim min_time_next_event As Double
    
    min_time_next_event = 1E+29
    next_event_type = 0
    
    'Determine the event type of the next event to occur.
    For i = 1 To num_events
        If time_next_event(i) < min_time_next_event Then
            min_time_next_event = time_next_event(i)
            next_event_type = i
        End If
    Next i
        
    'Check to see whether the event list is empty.
    If next_event_type = 0 Then
    
        'The event list is empty, so stop the simulation.
        Call MsgBox("Event list empty at time " & sim_time, 32, "Warning")
        End
        
    End If
        
    'The event list is not empty, so advance the simulation clock.
    sim_time = min_time_next_event
        
End Sub

Private Sub arrive()
    Dim delay As Double
    
    'Schedule next arrival.
    time_next_event(1) = sim_time + Expon(mean_interarrival, seed)
    
    'Check to see whether service is busy.
    If server_status = BUSY Then
        
        'Server is busy, so increment number of customers in queue.
        num_in_q = num_in_q + 1
        
        'Check to see whether an overflow condition exists.
        If num_in_q > Q_LIMIT Then
        
            'The queue has overflowed, so stop the simulation.
            Call MsgBox("Overflow of the array time_arrival at time " & sim_time, 32, "Warning")
            End
            
        End If
        
        'There is still room in the queue, so store the time of arrival
        '  of the arriving customer at the (new) end of time_arrival.
        time_arrival(num_in_q) = sim_time
    
    Else
        'Server is idle, so arriving customer has a delay of zero. (The
        '  following two statements are for program clarity and do not
        '  affect the results of the simulation.
        
        delay = 0#
        total_of_delays = total_of_delays + delay
        
        'Increment the number of customers delayed, and make server busy.
        num_custs_delayed = num_custs_delayed + 1
        server_status = BUSY
        
        'Schedule a departure (service completion).
        time_next_event(2) = sim_time + Expon(mean_service, seed)
    End If
        
End Sub

Private Sub depart() 'Departure event function.
    Dim i As Integer
    Dim delay As Double
    
    'Check to see whether the queue is empty.
    
    If num_in_q = 0 Then
        'The queue is empty so make the server idle and eliminate the
        '  departure (service completion) event from consideration.
        
        server_status = IDLE
        time_next_event(2) = 1E+30
    Else
        'The queue is nonempty, so decrement the number of customers  in
        '  queue.
        
        num_in_q = num_in_q - 1
        
        'Compute the delay of the customer who is beginning service and update
        '  the total delay accumulator.
        
        delay = sim_time - time_arrival(1)
        total_of_delays = total_of_delays + delay
        
        'Increment the number of customers delayed, and schedule departure.
        num_custs_delayed = num_custs_delayed + 1
        time_next_event(2) = sim_time + Expon(mean_service, seed)
        
        'Move each customer in queue (if any) up one place.
        
        For i = 1 To num_in_q
            time_arrival(i) = time_arrival(i + 1)
        Next i

    End If
    
End Sub

Private Sub report()
    'Compute and write estimates of desired measures of performance.

    With Worksheets("MM1")
            .Cells(17, 2) = total_of_delays / num_custs_delayed
            .Cells(18, 2) = area_num_in_q / sim_time
            .Cells(19, 2) = area_server_status / sim_time
            .Cells(20, 2) = sim_time
    End With

End Sub

Private Sub update_time_avg_stats()
'Update area accumulators for time-average statistics.
    
    Dim time_since_last_event As Double
    
    'Compute time since last event, and update last-event-time marker.
    time_since_last_event = sim_time - time_last_event
    time_last_event = sim_time
    
    'Update area under number-in-queue function.
    area_num_in_q = area_num_in_q + num_in_q * time_since_last_event
    
    'Update area under server-busy indicator function.
    area_server_status = area_server_status + server_status * time_since_last_event
    
End Sub

Sub test()
        Call MsgBox("Event list empty at time " & sim_time, 32, "Warning")
        End
End Sub



***Single-Server Queueing System								
								
Simulation 1								
								
Stopping Rule								
	Terminate the simulation when the maximum number of customers are served.							
								
Parameter Input								
			                           Seed-1				
Mean Arrival Time (min)	               1							
Mean Service Time(min)	             0.5							
Number of Customers	            1000							
								
								
Simulation Output								
								
Average Delay in Queue (min)	   0.430							
Average Number in Queue	           0.411							
Server Utilization	           0.483							
Time Simulation Ended (min)	1046.072							
								
								
								
Simulation 2 (with fixed run length)								
								
Stopping Rule								
	Terminate the simulation after a fixed amount of time.							
								
Parameter Input								
								
Mean Arrival Time (min)	           1.000	   Seed-15				
Mean Service Time(min)	           0.500							
Length of Simulation(min)	     480							
								
								
Simulation Output								
								
Average Delay in Queue (min)	   0.330							
Average Number in Queue            0.323							
Server Utilization	           0.470							
Number of Delays Completed	     465							
								

