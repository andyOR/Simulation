' This is a VBA program for the simulation of an Job shop machine queueing system discussed in class by Prof. Barton
Public Sub JobShop_main()  '/* Main function. */

    '/* Read input parameters. */
    STREAM_INTERARRIVAL = Worksheets("JobShop").Range("JobShop.SeedInterArrival").value
    STREAM_JOB_TYPE = Worksheets("JobShop").Range("JobShop.SeedJobType").value
    STREAM_SERVICE = Worksheets("JobShop").Range("JobShop.SeedService").value
    
    num_stations = Worksheets("JobShop").Range("JobShop.NumStations").value
    num_job_types = Worksheets("JobShop").Range("JobShop.NumJobTypes").value
    
    mean_interarrival = Worksheets("JobShop").Range("JobShop.MeanInterArrival").value
    length_simulation = Worksheets("JobShop").Range("JobShop.LengthSimulation").value
    
    ReDim num_machines(1 To MAX_NUM_STATIONS) As Integer
    ReDim num_tasks(1 To MAX_NUM_JOB_TYPES) As Integer
    ReDim route(1 To MAX_NUM_JOB_TYPES, 1 To MAX_NUM_STATIONS) As Integer
    ReDim num_machines_busy(1 To MAX_NUM_STATIONS) As Integer
    
    ReDim prob_distrib_job_type(1 To 25) As Double
    ReDim mean_service(1 To MAX_NUM_JOB_TYPES, 1 To MAX_NUM_STATIONS) As Double

    For j = 1 To num_stations
        num_machines(j) = Worksheets("JobShop").Cells(5, 1 + j)
    Next j
    
    For i = 1 To num_job_types
        num_tasks(i) = Worksheets("JobShop").Cells(7, 1 + i)
    Next i
    
        
    For i = 1 To num_job_types
       prob_distrib_job_type(i) = Worksheets("JobShop").Cells(8, 1 + i)
    Next i
    
    
    For i = 1 To num_job_types
        For j = 1 To num_tasks(i)
            route(i, j) = Worksheets("JobShop").Cells(12 + i, 1 + j)
            mean_service(i, j) = Worksheets("JobShop").Cells(17 + i, 1 + j)
        Next j
    Next i

    '/* Initialize all machines in all stations to the idle state. */

    For j = 1 To num_stations
        num_machines_busy(j) = 0
    Next j

    'Initialize the random seeds
    Call InitializeRNSeed

    '/* Initialize simlib */

    Call init_simlib

    '/* Set maxatr = max(maximum number of attributes per record, 4) */

    maxatr = 4  '/* NEVER SET maxatr TO BE SMALLER THAN 4. */

    '/* Schedule the arrival of the first job. */

    Call event_schedule(Expon(mean_interarrival, STREAM_INTERARRIVAL), EVENT_ARRIVAL)

    '/* Schedule the end of the simulation.  (This is needed for consistency of units.) */

    Call event_schedule(8 * length_simulation, EVENT_END_SIMULATION)

    '/* Run the simulation until it terminates after an end-simulation event
    '   (type EVENT_END_SIMULATION) occurs. */

    Do

        '/* Determine the next event. */

        Call timing

        '/* Invoke the appropriate event function. */

        Select Case next_event_type
            Case EVENT_ARRIVAL:
                Call arrive(1)
                
            Case EVENT_DEPARTURE:
                Call depart
                
            Case EVENT_END_SIMULATION:
                Call report(30, 1)
                
        End Select

    '/* If the event just executed was not the end-simulation event (type
    '   EVENT_END_SIMULATION), continue simulating.  Otherwise, end the
    '   simulation. */

    Loop While (next_event_type <> EVENT_END_SIMULATION)

End Sub


Private Sub arrive(new_job As Integer)  '/* Function to serve as both an arrival event of a job
                             'to the system, as well as the non-event of a job's
                             'arriving to a subsequent station along its
                             'route. */
    Dim station As Integer

    '/* If this is a new arrival to the system, generate the time of the next
    '   arrival and determine the job type and task number of the arriving
    '   job. */


    If (new_job = 1) Then
    
        Call event_schedule(sim_time + Expon(mean_interarrival, STREAM_INTERARRIVAL), EVENT_ARRIVAL)
        job_type = random_integer(prob_distrib_job_type, STREAM_JOB_TYPE)
        task = 1
    
    End If

    '/* Determine the station from the route matrix. */

    station = route(job_type, task)

    '/* Check to see whether all machines in this station are busy. */

    If (num_machines_busy(station) = num_machines(station)) Then

        '/* All machines in this station are busy, so place the arriving job at
        '   the end of the appropriate queue. Note that the following data are
        '   stored in the record for each job:
        '     1. Time of arrival to this station.
        '     2. Job type.
        '     3. Current task number. */

        transfer(1) = sim_time
        transfer(2) = job_type
        transfer(3) = task
        Call list_file(LAST, station)

    Else

        '/* A machine in this station is idle, so start service on the arriving
        '   job (which has a delay of zero). */

        Call sampst(0#, station)                               '/* For station. */
        Call sampst(0#, num_stations + job_type)               '/* For job type. */
        num_machines_busy(station) = num_machines_busy(station) + 1
        Call timest((num_machines_busy(station)), station)

        '/* Schedule a service completion.  Note defining attributes beyond the
        '   first two for the event record before invoking event_schedule. */

        transfer(3) = job_type
        transfer(4) = task
        Call event_schedule(sim_time + erlang(2, mean_service(job_type, task), STREAM_SERVICE), EVENT_DEPARTURE)
 End If
 
 '<<< The simulation for first ten days will be ignored by re-initiating the sampst and timest
  If (sim_time < 80) Then
    Call sampst(0#, 0)
    Call timest(0#, 0)
    End If

 
End Sub


Private Sub depart()  '/* Event function for departure of a job from a particular
                      'station. */

    Dim station As Integer
    Dim job_type_queue As Integer
    Dim task_queue As Integer

    '/* Determine the station from which the job is departing. */

    job_type = transfer(3)
    task = transfer(4)
    station = route(job_type, task)

    '/* Check to see whether the queue for this station is empty. */

    If (list_size(station) = 0) Then

        '/* The queue for this station is empty, so make a machine in this
        '   station idle. */

        num_machines_busy(station) = num_machines_busy(station) - 1
        Call timest((num_machines_busy(station)), station)

    Else

        '/* The queue is nonempty, so start service on first job in queue. */

        Call list_remove(FIRST, station)

        '/* Tally this delay for this station. */

        Call sampst(sim_time - transfer(1), station)

        '/* Tally this same delay for this job type. */

        job_type_queue = transfer(2)
        task_queue = transfer(3)
        Call sampst(sim_time - transfer(1), num_stations + job_type_queue)

        '/* Schedule end of service for this job at this station.  Note defining
        '   attributes beyond the first two for the event record before invoking
        '   event_schedule. */

        transfer(3) = job_type_queue
        transfer(4) = task_queue
        Call event_schedule(sim_time + erlang(2, mean_service(job_type_queue, task_queue), STREAM_SERVICE), EVENT_DEPARTURE)
    End If

    '/* If the current departing job has one or more tasks yet to be done, send
    '   the job to the next station on its route. */

    If (task < num_tasks(job_type)) Then
        task = task + 1
        Call arrive(2)
    End If
    If (sim_time < 80) Then
      Call sampst(0#, 0)
      Call timest(0#, 0)
    End If
End Sub

Public Sub report(row As Integer, col As Integer)  '/* Report generator function. */

    Dim i As Integer
    Dim overall_avg_job_tot_delay As Double
    Dim avg_job_tot_delay As Double
    Dim sum_probs As Double

    '/* Compute the average total delay in queue for each job type and the
    '   overall average job total delay. */

    overall_avg_job_tot_delay = 0#
    sum_probs = 0#
    
    With Worksheets("JobShop")
        .Cells(row, col) = "Job Type"
        .Cells(row, col + 1) = "Average total delay in queue"
        
        For i = 1 To num_job_types
            avg_job_tot_delay = sampst(0#, -(num_stations + i)) * num_tasks(i)
            
            row = row + 1
            .Cells(row, col) = i
            .Cells(row, col + 1) = avg_job_tot_delay
        
            overall_avg_job_tot_delay = overall_avg_job_tot_delay + (prob_distrib_job_type(i) - sum_probs) * avg_job_tot_delay
            sum_probs = prob_distrib_job_type(i)
        Next i
        
        row = row + 2
        .Cells(row, col) = "Overall average job total delay = " & overall_avg_job_tot_delay
        
        row = row + 2
        .Cells(row, col) = "Work"
        .Cells(row + 1, col) = "station"
        .Cells(row, col + 1) = "Average"
        .Cells(row + 1, col + 1) = "number in queue"
        .Cells(row, col + 2) = "Average"
        .Cells(row + 1, col + 2) = "utilization"
        .Cells(row, col + 3) = "Average"
        .Cells(row + 1, col + 3) = "delay in queue"
        
        '/* Compute the average number in queue, the average utilization, and the
        '   average delay in queue for each station. */
        row = row + 1
        For j = 1 To num_stations
            row = row + 1
            .Cells(row, col) = j
            .Cells(row, col + 1) = filest(j)
            .Cells(row, col + 2) = timest(0#, -j) / num_machines(j)
            .Cells(row, col + 3) = sampst(0#, -j)
        Next j
        
    End With

End Sub



***Job-shop model								
Parameter Input								
								
Number of work stations	5							
Number of machines in each station	3	2	4	3	1			
Number of job types	3							
Number of tasks for each job type	4	3	5					
Distribution function of job types	0.3	0.8	1					
Mean interarrival time of jobs	0.25							
Length of simulation	100							
								
Job type	Work stations on route							
1	3	1	2	5				
2	4	1	3					
3	2	5	1	4	3			
								
Job type	Mean service time							
1	0.5	0.6	0.85	0.5				
2	1.1	0.8	0.75					
3	1.2	0.25	0.7	0.9	1			
								
								
								
								
								
								
								
Simulation Output								
								
Job Type	Average total delay in queue							
1	11.87491555							
2	6.529287448							
3	15.9715684							
								
Overall average job total delay = 10.0214320669807								
								
Work	Average	Average	Average					
station	number in queue	utilization	delay in queue					
1	7.299223265	0.927624039	1.871947149					
2	17.42489671	0.470516405	8.994254047					
3	0.5177755	0.692842587	0.133049587					
4	12.57432402	0.96422116	4.524714592					
5	1.300165984	0.779655309	0.665662525					


